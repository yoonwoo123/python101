
# 미로탈출
import sys
sys.stdin = open("in.txt")

def BFS():
    dr = (-1, 1, 0, 0)
    dc = (0, 0, -1, 1)
    que=[]
    que.append((sr, sc, 0, 0))
    chk[0][sr][sc]=1
    while que:
        r, c, boom, cnt = que.pop(0)
        for i in range(4):
            nr = r+dr[i]
            nc = c+dc[i]
            if nr<0 or nr>=R or nc<0 or nc>=C :continue
            if arr[nr][nc] == 1 :continue
            if arr[nr][nc]==4: return cnt+1
            if arr[nr][nc] ==0 :
                if chk[boom][nr][nc]: continue
                que.append((nr, nc, boom, cnt+1))
                chk[boom][nr][nc]=1
            elif arr[nr][nc]==2 :
                if boom<3 and not chk[boom+1][nr][nc]:
                    que.append((nr, nc, boom+1, cnt + 1))
                    chk[boom+1][nr][nc] = 1
    return -1

#main------------------------------------
R, C = map(int, input().split())
chk = [ [ [0]*C for i in range(R) ] for j in range(4) ]

arr = []
for i in range(R):
    arr.append(list(map(int, input().split())))

for i in range(R):
    for j in range(C):
        if arr[i][j]==3:
            sr=i
            sc=j
            break

sol = BFS()
print(sol)


# 치킨배달2
import sys
sys.stdin = open("in.txt")

def check():
    hap=0
    for i in range(HN):
        nmin=20*20
        for j in range(CN):
            if not chk[j]: continue
            nmin = min(nmin, dist[i][j])
        hap += nmin
    return hap

def DFS(no, cnt):
    global sol
    if cnt==M:
        hap = check()
        if hap<sol:sol=hap
        return
    if no>=CN: return
    chk[no]=1
    DFS(no+1, cnt+1)
    chk[no]=0
    DFS(no+1, cnt)

# main --------------------------------
N, M = map(int, input().split())
arr = [list(map(int, input().split())) for _ in range(N) ]
house = []
chicken = []
for i in range(N):
    for j in range(N):
        if arr[i][j]==2:
            chicken.append((i,j))
        elif arr[i][j]==1:
            house.append((i, j))
CN = len(chicken)
HN = len(house)
dist =[[0]*CN for _ in range(HN)]
chk = [0] * CN

for i in range(HN):
    for j in range(CN):
        dist[i][j] = abs(house[i][0] - chicken[j][0]) + abs(house[i][1] - chicken[j][1])
        #print(dist[i][j], end=' ')
    #print(min(dist[i]))

sol=0x7fffffff
DFS(0, 0)
print(sol)


# 미사일
import sys
sys.stdin = open("in.txt")

def clear(i):
    for j in range(N):
        dist = abs(arr[i][0] - arr[j][0]) + abs(arr[i][1]-arr[j][1])
        if dist<=R:
            arr[j][2]-=P

def update(i):
    for j in range(N):
        dist = abs(arr[i][0] - arr[j][0]) + abs(arr[i][1]-arr[j][1])
        if dist<=R: arr[j][2]+=P

def DFS(no):
    global sol
    if no>M:
        cnt=0
        for i in range(N):
            if arr[i][2]>0: cnt+=1
        if cnt<sol: sol=cnt
        return

    for i in range(N):
        if arr[i][2]<=0 : continue
        clear(i)
        DFS(no+1)
        update(i)

#main -------------------------
N= int(input())
arr = []
for i in range(N):
    arr.append(list(map(int, input().split())))
M, P, R = map(int, input().split())

sol=16
DFS(1)
print(sol)

#기업투자베이직
import sys
sys.stdin = open("in.txt")

def DFS(no, rem, hap):
    global sol
    if no>N:
        if hap>sol: sol=hap
        return
    for i in range(rem+1):
        DFS(no+1, rem-i, hap+arr[i][no])

#main --------------------------
M, N = map(int, input().split())
arr =[[0]*(N +1 )] # 0행에 모든 기업개수만큼 이익금 0원으로
for i in range(M): # 1행부터 입력
    arr.append(list(map(int, input().split())))

sol = 0
DFS(1, M, 0)

# 해밀턴순환회로
import sys
sys.stdin = open("in.txt")
# PY-TST
def DFS(no, hap, cnt):
    global sol
    if cnt>=N:
        if arr[no][0]:
            if hap + arr[no][0] < sol: sol = hap + arr[no][0]
        return
    for i in range(1, N):
        if arr[no][i] and not chk[i]:
            chk[i]=1
            DFS(i, hap+arr[no][i], cnt+1)
            chk[i]=0

#main -----------------------
N= int(input())
chk=[0]*N
arr=[]
for i in range(N):
    arr.append(list(map(int, input().split())))

sol = 10000
DFS(0, 0, 1)
print(sol)





